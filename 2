// ===============================
// PASSWORD MANAGER PROJECT
// By: Rayne Chanelo, Bren Valenzuela, Ron Adrian,
//     Jazper Satairapan, Johan Earl Brixter
// ===============================

#include <iostream>
#include <string>
#include <vector>
#include <random>
using namespace std;

struct Token {
    string value;
    string type;
};

vector<Token> tokenizePassword(const string& password) {
    vector<Token> tokens;
    string temp;
    string currentType = "";

    for (char c : password) {
        string t;
        if (isalpha(c)) t = "letter";
        else if (isdigit(c)) t = "digit";
        else t = "symbol";

        if (t != currentType && !temp.empty()) {
            tokens.push_back({temp, currentType});
            temp = "";
        }
        temp += c;
        currentType = t;
    }

    if (!temp.empty()) tokens.push_back({temp, currentType});
    return tokens;
}

size_t generateSeed(const string& key, const string& site, const string& orig) {
    size_t seed = 0;
    for (char c : key + site + orig) seed += c * 31;
    return seed;
}

string generateCorrelatedPassword(const string& masterKey, const string& site, const string& originalPassword) {
    size_t seed = generateSeed(masterKey, site, originalPassword);
    mt19937 rng(seed);
    uniform_int_distribution<int> dist(33, 126);

    vector<Token> tokens = tokenizePassword(originalPassword);
    string newPass;

    for (auto& t : tokens) {
        for (char c : t.value) {
            if (t.type == "letter") {
                bool upper = isupper(c);
                char base = upper ? 'A' : 'a';
                c = base + ((c - base + (dist(rng) % 26)) % 26);
            }
            else if (t.type == "digit") {
                c = '0' + ((c - '0' + (dist(rng) % 10)) % 10);
            }
            else if (t.type == "symbol") {
                c = 33 + (dist(rng) % 15);
            }
            newPass += c;
        }
    }
    return newPass;
}

string checkStrength(const string& pass) {
    bool upper = false, lower = false, num = false, sym = false;
    for (char c : pass) {
        if (isupper(c)) upper = true;
        else if (islower(c)) lower = true;
        else if (isdigit(c)) num = true;
        else if (ispunct(c)) sym = true;
    }

    int score = upper + lower + num + sym;
    if (pass.size() < 6) return "Weak";
    else if (score >= 3 && pass.size() >= 8) return "Strong";
    else return "Medium";
}

struct Account {
    string site;
    string user;
    string password;
};

int main() {
    vector<Account> database;
    string masterKey;
    int choice;

    cout << "==============================\n";
    cout << " PASSWORD MANAGER PROJECT\n";
    cout << "==============================\n";
    cout << " By: Rayne Chanelo, Bren Valenzuela, Ron Adrian,\n";
    cout << "     Jazper Satairapan, Johan Earl Brixter\n";
    cout << "==============================\n\n";

    cout << "Set your master key: ";
    cin >> masterKey;
    cout << "Master key set successfully.\n";

    while (true) {
        cout << "\n==============================";
        cout << "\n   PASSWORD MANAGER MENU";
        cout << "\n==============================";
        cout << "\n[1] Create new password";
        cout << "\n[2] View all passwords";
        cout << "\n[3] Find password by site";
        cout << "\n[4] Check password strength";
        cout << "\n[5] Exit";
        cout << "\nChoose: ";
        cin >> choice;

        if (choice == 1) {
            string site, user, original;
            cout << "\nEnter site name: ";
            cin >> site;
            cout << "Enter username: ";
            cin >> user;
            cout << "Enter your original password: ";
            cin >> original;

            string newPass = generateCorrelatedPassword(masterKey, site, original);
            cout << "\nGenerated Password: " << newPass << endl;

            database.push_back({site, user, newPass});
            cout << "Password saved successfully.\n";
        }

        else if (choice == 2) {
            if (database.empty()) {
                cout << "\nNo passwords saved yet.\n";
            } else {
                string inputKey;
                cout << "\nEnter master key to view all passwords: ";
                cin >> inputKey;
                if (inputKey == masterKey) {
                    cout << "\n--- STORED PASSWORDS ---\n";
                    for (auto& a : database) {
                        cout << "Site: " << a.site << " | User: " << a.user << " | Pass: " << a.password << endl;
                    }
                } else {
                    cout << "Wrong master key! Access denied.\n";
                }
            }
        }

        else if (choice == 3) {
            string site;
            cout << "\nEnter site name: ";
            cin >> site;
            bool found = false;
            for (auto& a : database) {
                if (a.site == site) {
                    cout << "User: " << a.user << " | Pass: " << a.password << endl;
                    found = true;
                }
            }
            if (!found) cout << "No record found.\n";
        }

        else if (choice == 4) {
            string pass;
            cout << "\nEnter password to check: ";
            cin >> pass;
            cout << "Strength: " << checkStrength(pass) << endl;
        }

        else if (choice == 5) {
            cout << "\nThank you for using our program!\n";
            break;
        }

        else {
            cout << "Invalid choice. Try again.\n";
        }
    }

    return 0;
}

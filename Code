#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <random>
#include <algorithm>
#include <functional>
#include <cctype>
#include <iomanip>
using namespace std;

class PasswordManager {
private:
    struct Token {
        enum Type { LETTERS, DIGITS, SYMBOLS } type;
        string value;
    };

    struct SavedPassword {
        string site;
        string username;
        string password;
    };

    vector<SavedPassword> db;

    const string low = "abcdefghijklmnopqrstuvwxyz";
    const string up = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    const string num = "0123456789";
    const string sym = "!@#$%^&*()_+-=[]{}|;:,.<>?";

public:

    size_t makeSeed(const string& master, const string& site, const string& pass) {
        string combo = master + site + pass;
        hash<string> h;
        return h(combo);
    }

    Token::Type getType(char c) {
        if (isalpha(c)) return Token::LETTERS;
        if (isdigit(c)) return Token::DIGITS;
        return Token::SYMBOLS;
    }

    vector<Token> splitPassword(const string& pass) {
        vector<Token> tokens;
        if (pass.empty()) return tokens;

        Token::Type t = getType(pass[0]);
        string cur;
        for (char c : pass) {
            Token::Type now = getType(c);
            if (now == t) cur += c;
            else {
                tokens.push_back({t, cur});
                cur = c;
                t = now;
            }
        }
        if (!cur.empty()) tokens.push_back({t, cur});
        return tokens;
    }

    string lettersChange(const string& letters, mt19937& rng) {
        uniform_int_distribution<int> shiftDist(1, 3);
        int shift = shiftDist(rng);
        string out;
        for (char c : letters) {
            if (islower(c)) out += low[(low.find(c) + shift) % low.size()];
            else if (isupper(c)) out += up[(up.find(c) + shift) % up.size()];
        }
        return out;
    }

    string digitsChange(const string& digits, mt19937& rng) {
        uniform_int_distribution<int> modDist(1, 2);
        int mod = modDist(rng);
        string out;
        for (char c : digits) {
            int d = c - '0';
            out += to_string((d + mod) % 10);
        }
        return out;
    }

    string symbolsChange(const string& s, mt19937& rng) {
        map<char, string> m = {
            {'!', "!@1"}, {'@', "@#2"}, {'#', "#$3"}, {'$', "$%4"},
            {'%', "%^5"}, {'^', "^&6"}, {'&', "&*7"}, {'*', "*()8"},
            {'(', "()9"}, {')', ")_0"}, {'-', "-_="}, {'_', "_-+"},
            {'=', "=+["}, {'+', "+]}"}, {'[', "[{]"}, {']', "]}"},
            {'{', "{}"}, {'}', "}|"}, {'|', "|;"}, {';', ";:"},
            {':', ":."}, {'.', ".,"}, {'<', "<,"}, {'>', ">."},
            {'?', "?/"}, {'/', "/\\"}
        };

        string out;
        for (char c : s) {
            if (m.find(c) != m.end()) {
                string pool = m[c];
                uniform_int_distribution<int> dist(0, pool.size() - 1);
                out += pool[dist(rng)];
            } else out += c;
        }
        return out;
    }

    string makeCorrelated(const string& master, const string& site, const string& orig) {
        size_t seed = makeSeed(master, site, orig);
        mt19937 rng(seed);
        string newPass;
        vector<Token> tokens = splitPassword(orig);
        for (auto& t : tokens) {
            if (t.type == Token::LETTERS) newPass += lettersChange(t.value, rng);
            else if (t.type == Token::DIGITS) newPass += digitsChange(t.value, rng);
            else newPass += symbolsChange(t.value, rng);
        }
        return newPass;
    }

    void save(const string& site, const string& user, const string& pass) {
        db.push_back({site, user, pass});
        cout << "\n*** Saved successfully! Total: " << db.size() << " ***\n";
    }

    void find(const string& site, const string& user) {
        if (db.empty()) {
            cout << "!!! No passwords saved yet !!!\n";
            return;
        }
        bool found = false;
        for (auto& p : db) {
            if (p.site == site && p.username == user) {
                cout << "\n>>> FOUND: " << p.password << "\n";
                found = true;
                break;
            }
        }
        if (!found) cout << "!!! No match found !!!\n";
    }

    void showAll() {
        if (db.empty()) {
            cout << "!!! Nothing saved yet !!!\n";
            return;
        }
        cout << "\n=== SAVED PASSWORDS ===\n";
        for (size_t i = 0; i < db.size(); i++) {
            cout << "[" << i + 1 << "] Site: " << db[i].site
                 << " | User: " << db[i].username
                 << " | Pass: " << db[i].password << "\n";
        }
    }

    void checkStrength(const string& pass) {
        int score = 0;
        if (pass.length() >= 8) score++;
        if (pass.length() >= 12) score++;
        bool low = false, up = false, dig = false, symb = false;
        for (char c : pass) {
            if (islower(c)) low = true;
            else if (isupper(c)) up = true;
            else if (isdigit(c)) dig = true;
            else symb = true;
        }
        if (low && up) score++;
        if (dig) score++;
        if (symb) score++;

        cout << "\n=== PASSWORD STRENGTH ===\n";
        cout << "Length: " << pass.size() << "\n";
        cout << "Has lower: " << (low ? "YES" : "NO") << "\n";
        cout << "Has upper: " << (up ? "YES" : "NO") << "\n";
        cout << "Has digit: " << (dig ? "YES" : "NO") << "\n";
        cout << "Has symbol: " << (symb ? "YES" : "NO") << "\n";

        cout << "Overall: ";
        if (score <= 2) cout << "WEAK";
        else if (score <= 4) cout << "MEDIUM";
        else cout << "STRONG";
        cout << " (" << score << "/5)\n";
    }
};

void welcome() {
    cout << "=========================================\n";
    cout << "   PASSWORD MANAGER PROJECT (G11 J.O.B.S)\n";
    cout << "=========================================\n";
    cout << "Rayne Chanelo\nBren Valenzuela\nRon Adrian\n";
    cout << "Jazper Satairapan\nJohan Earl Brixter\n";
    cout << "=========================================\n\n";
}

void howTo() {
    cout << "=== HOW TO USE ===\n";
    cout << "1. Create new password (needs master key)\n";
    cout << "2. Find saved password by site & username\n";
    cout << "3. Check password strength\n";
    cout << "4. View all saved passwords\n";
    cout << "5. Exit\n\n";
    cout << "NOTE: data not saved to file (temporary only)\n\n";
}

void menu() {
    cout << "\n[1] Create New Password\n";
    cout << "[2] Find Saved Password\n";
    cout << "[3] Check Strength\n";
    cout << "[4] View All\n";
    cout << "[5] Exit\n";
    cout << "Choice: ";
}

int main() {
    PasswordManager pm;
    int choice;

    welcome();
    howTo();

    do {
        menu();
        cin >> choice;
        cin.ignore();

        if (choice == 1) {
            string master, site, user, oldPass;
            cout << "\nEnter master key: ";
            getline(cin, master);
            cout << "Website: ";
            getline(cin, site);
            cout << "Username: ";
            getline(cin, user);
            cout << "Current password: ";
            getline(cin, oldPass);

            string newPass = pm.makeCorrelated(master, site, oldPass);
            cout << "\nOriginal: " << oldPass << "\n";
            cout << "New: " << newPass << "\n";
            pm.checkStrength(newPass);

            char s;
            cout << "\nSave it? (y/n): ";
            cin >> s;
            cin.ignore();
            if (s == 'y' || s == 'Y') pm.save(site, user, newPass);
        }

        else if (choice == 2) {
            string site, user;
            cout << "\nEnter site: ";
            getline(cin, site);
            cout << "Username: ";
            getline(cin, user);
            pm.find(site, user);
        }

        else if (choice == 3) {
            string pass;
            cout << "\nEnter password: ";
            getline(cin, pass);
            pm.checkStrength(pass);
        }

        else if (choice == 4) {
            pm.showAll();
        }

        else if (choice == 5) {
            cout << "\nThanks for using our program!\n";
        }

        else cout << "Invalid input.\n";

        if (choice != 5) {
            cout << "\nPress Enter to continue...";
            cin.get();
        }

    } while (choice != 5);

    return 0;
}
